local fd=require'carlos.fold'
local fs=require'carlos.files'
local io=require'carlos.io'

local path='ClaveProdServ.csv'

--local dict = {}
local cats = {}
local counts = {}

local isint = math.tointeger
local log = math.log
local floor = math.floor
local function log10(x) return log(x, 10) end
local pow = math.pow
local function pow10(x) return pow(10, x) end

local function ints(a)
    if isint(a) then
	return floor(a / 100) -- pow10(floor(log10(a)) - 2)
    end
    return 0
end

local letters = {'0xc1', '0xe1', '0xc9', '0xe9', '0xcd', '0xed', '0xd1', '0xf1', '0xd3', '0xf3', '0xda', '0xfa'}
letters = fd.reduce(letters, fd.map(function(x) return utf8.char(x) end), fd.into, {})

--local esp = {[utf8.char'0xc1']='a', [utf8.char'0xe1']='a', [utf8.char'0xc9']='e', [utf8.char'0xe9']='e', [utf8.char'0xcd']='i', [utf8.char'0xed']='i', [utf8.char'0xd1']='gn', [utf8.char'0xf1']='gn', [utf8.char'0xd3']='o', [utf8.char'0xf3']='o', [utf8.char'0xda']='u', [utf8.char'0xfa']='u'}

local latins = fd.reduce(letters, fd.into, {'%a'})
latins = table.concat(latins, '')

local function inDict(phrase, cat)
    if tonumber(phrase) then return nil end
    for w in phrase:gmatch(string.format('[%s]+', latins)) do
	w = w:lower() -- w:gsub(string.format('[%s]', patts), esp):lower()
	local b = ints(cat)
	if not cats[b] then cats[b] = {} end
	local dict = cats[b]
	if dict[w] then counts[w] = counts[w] + 1
	else dict[w] = true; counts[w] = 1; end
    end
end

fd.reduce(fs.dlmread(path, ';'), function(x) inDict(x[2], x[1]); inDict(x[#x], x[1]) end)

local ans = fd.reduce(fd.keys(counts), fd.map(function(w,k) return k..'\t'..w end), fd.into, {})

fs.dump('wordsFreq.csv', table.concat(ans, '\n'))

local function list(m)
    return table.concat(fd.reduce(fd.keys(m), fd.map(function(_,k) return k end), fd.into, {}), ', ')
end

ans = fd.reduce(fd.keys(cats), fd.map(list), fd.map(function(ws,k) return k..'\t'..ws  end), fd.into, {})

fs.dump('wordsFreq2.csv', table.concat(ans, '\n'))

